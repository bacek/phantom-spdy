#! /usr/bin/phantom run
#
# See:
# phantom syntax /usr/lib/phantom/mod_io_benchmark{,_method_stream{,_ipv4,_ipv6,_source_random,_source_log,_proto_http}}.so
#

setup_t module_setup = setup_module_t {
	dir = "/usr/lib/phantom"
	list = {
        ssl
		io_benchmark
		io_benchmark_method_stream
		io_benchmark_method_stream_ipv4
		io_benchmark_method_stream_source_random
		io_monitor
	}
}

setup_t module_setup = setup_module_t {
	dir = "./lib/phantom"
	list = {
		io_benchmark_method_stream_spdy
	}
}


scheduler_t main_scheduler = scheduler_simple_t {
	threads = 4
}


io_t benchmark_io = io_benchmark_t {
    method_t stream_method = method_stream_ipv4_t {
        ibuf_size = 128K

        # Special SPDY transport
        transport_t ssl_transport = spdy_transport_t {
            protos = { "spdy/3.1" "spdy/3" "spdy/2" }
        }

        # Original source of URLs to be processed by spdy_source_filter
        # Emulate 3-to-1 ratio between 200 and 404 responses.
        # Don't put "headers" here. Just don't. spdy_source_filter isn't smart
        # enough to parse actual HTTP requests.
        source_t index_source = source_random_t {
            requests = {
                "/index.html"
                "/index.html"
                "/index.html"
                "/non-existent.html"
            }

            tests = 1M
        }

        # Source filter HTTP-to-SPDY (not yet, but)
        source_t spdy_source = spdy_source_filter_t {
            # Original URLs source.
            source = index_source

            # Amount of parallel requests in single connection
            burst = 10

            # Predefined set of headers to send.
            # spdy_source_filter_t will append :path from .source
            headers = {
                ":method"           "GET"
                ":version"          "HTTP/1.1"
                ":scheme"           "https"
                # :host should be host:port. So if you change port below -
                # change it here as well.
                ":host"             "browserver.yandex.ru:8080"
                #"accept-encoding"   "gzip,deflate"
                "accept"            "*/*"
                "user-agent"        "Phantom/SPDY"
            }
        }

        # Response is SPDY. Handle it properly
        proto_t http_proto = spdy_proto_t {}

        address = 127.0.0.1
        port = 8080
        timeout = 5s
        source = spdy_source
        transport = ssl_transport
        proto = http_proto

        logger_t default_logger = logger_default_t {
            filename = "benchmark-default.log"
            level = proto_warning
            scheduler = main_scheduler
        }

        logger_t brief_logger = logger_brief_t {
            filename = "benchmark-brief.log"
            scheduler = main_scheduler
        }

        loggers = { default_logger brief_logger }
    }

	times_t simple_times = times_simple_t {
		max = 3s
		min = 10
		steps = 20
	}

	instances = 100
	method = stream_method
	times = simple_times

	scheduler = main_scheduler
}

setup_t stat_setup = setup_stat_t {
	list = { default }
}

io_t monitor_io = io_monitor_t {
	list = { benchmark_io }
	stat_id = default

	period = 1s
	clear = false

	scheduler = main_scheduler
	filename = "/proc/self/fd/1"
}
